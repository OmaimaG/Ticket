{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  tickets: [],\n  isLoading: false,\n  error: \"\",\n  replyTicketError: \"\",\n  searchTicketList: [],\n  selectedTicket: {},\n  replyMsg: \"\"\n};\nconst ticketListSlice = createSlice({\n  name: \"ticketList\",\n  initialState,\n  reducers: {\n    fetchTicketLoading: state => {\n      state.isLoading = true;\n    },\n    fetchTicketSuccess: (state, action) => {\n      state.tickets = action.payload;\n      state.searchTicketList = action.payload;\n      state.isLoading = false;\n    },\n    fetchTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    },\n    searchTickets: (state, {\n      payload\n    }) => {\n      state.searchTicketList = state.tickets.filter(row => {\n        if (!payload) return row;\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\n      });\n    },\n    fetchSingleTicketLoading: state => {\n      state.isLoading = true;\n    },\n    fetchSingleTicketSuccess: (state, {\n      payload\n    }) => {\n      state.selectedTicket = payload;\n      state.isLoading = false;\n      state.error = \"\";\n    },\n    fetchSingleTicketFail: (state, {\n      payload\n    }) => {\n      state.isLoading = false;\n      state.error = payload;\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = ticketListSlice;\nexport const {\n  fetchTicketLoading,\n  fetchTicketSuccess,\n  fetchTicketFail,\n  fetchSingleTicketLoading,\n  fetchSingleTicketSuccess,\n  fetchSingleTicketFail,\n  replyTicketLoading,\n  replyTicketSuccess,\n  replyTicketFail,\n  closeTicketLoading,\n  closeTicketSuccess,\n  closeTicketFail,\n  searchTickets,\n  resetResponseMsg\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","initialState","tickets","isLoading","error","replyTicketError","searchTicketList","selectedTicket","replyMsg","ticketListSlice","name","reducers","fetchTicketLoading","state","fetchTicketSuccess","action","payload","fetchTicketFail","searchTickets","filter","row","subject","toLowerCase","includes","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","reducer","actions","replyTicketLoading","replyTicketSuccess","replyTicketFail","closeTicketLoading","closeTicketSuccess","closeTicketFail","resetResponseMsg"],"sources":["C:/ticket/ticketproject/client/src/page/ticket-listing/ticketListSlic.js"],"sourcesContent":["\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  tickets: [],\r\n  isLoading: false,\r\n  error: \"\",\r\n  replyTicketError: \"\",\r\n  searchTicketList: [],\r\n  selectedTicket: {},\r\n  replyMsg: \"\",\r\n};\r\n\r\nconst ticketListSlice = createSlice({\r\n  name: \"ticketList\",\r\n  initialState,\r\n  reducers: {\r\n    fetchTicketLoading: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    fetchTicketSuccess: (state, action) => {\r\n      state.tickets = action.payload;\r\n      state.searchTicketList = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    fetchTicketFail: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = payload;\r\n    },\r\n    searchTickets: (state, { payload }) => {\r\n      state.searchTicketList = state.tickets.filter((row) => {\r\n        if (!payload) return row;\r\n\r\n        return row.subject.toLowerCase().includes(payload.toLowerCase());\r\n      });\r\n    },\r\n    fetchSingleTicketLoading: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    fetchSingleTicketSuccess: (state, { payload }) => {\r\n      state.selectedTicket = payload;\r\n      state.isLoading = false;\r\n      state.error = \"\";\r\n    },\r\n    fetchSingleTicketFail: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = payload;\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nconst { reducer, actions } = ticketListSlice;\r\n\r\nexport const {\r\n  fetchTicketLoading,\r\n  fetchTicketSuccess,\r\n  fetchTicketFail,\r\n  fetchSingleTicketLoading,\r\n  fetchSingleTicketSuccess,\r\n  fetchSingleTicketFail,\r\n  replyTicketLoading,\r\n  replyTicketSuccess,\r\n  replyTicketFail,\r\n  closeTicketLoading,\r\n  closeTicketSuccess,\r\n  closeTicketFail,\r\n  searchTickets,\r\n  resetResponseMsg,\r\n} = actions;\r\n\r\nexport default reducer;"],"mappings":"AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EAAE;EACXC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,EAAE;EACTC,gBAAgB,EAAE,EAAE;EACpBC,gBAAgB,EAAE,EAAE;EACpBC,cAAc,EAAE,CAAC,CAAC;EAClBC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,eAAe,GAAGT,WAAW,CAAC;EAClCU,IAAI,EAAE,YAAY;EAClBT,YAAY;EACZU,QAAQ,EAAE;IACRC,kBAAkB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAACV,SAAS,GAAG,IAAI;IACxB,CAAC;IACDW,kBAAkB,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACrCF,KAAK,CAACX,OAAO,GAAGa,MAAM,CAACC,OAAO;MAC9BH,KAAK,CAACP,gBAAgB,GAAGS,MAAM,CAACC,OAAO;MACvCH,KAAK,CAACV,SAAS,GAAG,KAAK;IACzB,CAAC;IACDc,eAAe,EAAEA,CAACJ,KAAK,EAAE;MAAEG;IAAQ,CAAC,KAAK;MACvCH,KAAK,CAACV,SAAS,GAAG,KAAK;MACvBU,KAAK,CAACT,KAAK,GAAGY,OAAO;IACvB,CAAC;IACDE,aAAa,EAAEA,CAACL,KAAK,EAAE;MAAEG;IAAQ,CAAC,KAAK;MACrCH,KAAK,CAACP,gBAAgB,GAAGO,KAAK,CAACX,OAAO,CAACiB,MAAM,CAAEC,GAAG,IAAK;QACrD,IAAI,CAACJ,OAAO,EAAE,OAAOI,GAAG;QAExB,OAAOA,GAAG,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,OAAO,CAACM,WAAW,CAAC,CAAC,CAAC;MAClE,CAAC,CAAC;IACJ,CAAC;IACDE,wBAAwB,EAAGX,KAAK,IAAK;MACnCA,KAAK,CAACV,SAAS,GAAG,IAAI;IACxB,CAAC;IACDsB,wBAAwB,EAAEA,CAACZ,KAAK,EAAE;MAAEG;IAAQ,CAAC,KAAK;MAChDH,KAAK,CAACN,cAAc,GAAGS,OAAO;MAC9BH,KAAK,CAACV,SAAS,GAAG,KAAK;MACvBU,KAAK,CAACT,KAAK,GAAG,EAAE;IAClB,CAAC;IACDsB,qBAAqB,EAAEA,CAACb,KAAK,EAAE;MAAEG;IAAQ,CAAC,KAAK;MAC7CH,KAAK,CAACV,SAAS,GAAG,KAAK;MACvBU,KAAK,CAACT,KAAK,GAAGY,OAAO;IACvB;EAEF;AACF,CAAC,CAAC;AAEF,MAAM;EAAEW,OAAO;EAAEC;AAAQ,CAAC,GAAGnB,eAAe;AAE5C,OAAO,MAAM;EACXG,kBAAkB;EAClBE,kBAAkB;EAClBG,eAAe;EACfO,wBAAwB;EACxBC,wBAAwB;EACxBC,qBAAqB;EACrBG,kBAAkB;EAClBC,kBAAkB;EAClBC,eAAe;EACfC,kBAAkB;EAClBC,kBAAkB;EAClBC,eAAe;EACfhB,aAAa;EACbiB;AACF,CAAC,GAAGP,OAAO;AAEX,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}