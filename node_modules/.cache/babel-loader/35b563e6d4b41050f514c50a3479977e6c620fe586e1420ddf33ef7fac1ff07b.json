{"ast":null,"code":"import axios from 'axios';\nexport const getAllTickets = async () => {\n  try {\n    // Effectuez une demande au serveur pour obtenir le token\n    const response = await axios.post('http://localhost:5000/auth/login', data); // Assurez-vous d'envoyer les données de connexion appropriées\n\n    // Récupérez le token depuis la réponse du serveur\n    const token = response.data.token;\n\n    // Enregistrez le token dans localStorage\n    localStorage.setItem('accessToken', token);\n    console.log(token);\n\n    // Vérifiez si le jeton existe\n    if (!token) {\n      throw new Error('Access token is missing.'); // Gérez le cas où le jeton est manquant\n    }\n\n    // Utilisez le token pour effectuer une demande sécurisée\n    const secureResponse = await axios.get('http://localhost:5000/ticket', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    // Si la requête réussit, retournez les données de la réponse sécurisée\n    return secureResponse.data;\n  } catch (error) {\n    // Si une erreur se produit, rejetez la promesse avec l'objet d'erreur\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getAllTickets","response","post","data","token","localStorage","setItem","console","log","Error","secureResponse","get","headers","Authorization","error"],"sources":["C:/ticket/ticketproject/client/src/api/ticketApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const getAllTickets = async () => {\r\n  try {\r\n    // Effectuez une demande au serveur pour obtenir le token\r\n    const response = await axios.post('http://localhost:5000/auth/login', data); // Assurez-vous d'envoyer les données de connexion appropriées\r\n\r\n    // Récupérez le token depuis la réponse du serveur\r\n    const token = response.data.token;\r\n\r\n    // Enregistrez le token dans localStorage\r\n    localStorage.setItem('accessToken', token);\r\n    console.log(token);\r\n    \r\n    // Vérifiez si le jeton existe\r\n    if (!token) {\r\n      throw new Error('Access token is missing.'); // Gérez le cas où le jeton est manquant\r\n    }\r\n\r\n    // Utilisez le token pour effectuer une demande sécurisée\r\n    const secureResponse = await axios.get('http://localhost:5000/ticket', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    // Si la requête réussit, retournez les données de la réponse sécurisée\r\n    return secureResponse.data;\r\n  } catch (error) {\r\n    // Si une erreur se produit, rejetez la promesse avec l'objet d'erreur\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,IAAI,CAAC,kCAAkC,EAAEC,IAAI,CAAC,CAAC,CAAC;;IAE7E;IACA,MAAMC,KAAK,GAAGH,QAAQ,CAACE,IAAI,CAACC,KAAK;;IAEjC;IACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,KAAK,CAAC;IAC1CG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;;IAElB;IACA,IAAI,CAACA,KAAK,EAAE;MACV,MAAM,IAAIK,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC;IAC/C;;IAEA;IACA,MAAMC,cAAc,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,8BAA8B,EAAE;MACrEC,OAAO,EAAE;QACPC,aAAa,EAAG,UAAST,KAAM;MACjC;IACF,CAAC,CAAC;;IAEF;IACA,OAAOM,cAAc,CAACP,IAAI;EAC5B,CAAC,CAAC,OAAOW,KAAK,EAAE;IACd;IACA,MAAMA,KAAK;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}