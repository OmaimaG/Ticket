{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getAllTickets } from '../../api/ticketApi';\nimport { fetchTicketFail, fetchTicketLoading, fetchTicketSuccess } from './ticketSlice';\nexport const fetchAlltickets = createAsyncThunk('tickets/fetchAlltickets', async (_, {\n  dispatch\n}) => {\n  dispatch(fetchTicketLoading());\n  try {\n    const response = await getAllTickets();\n    dispatch(fetchTicketSuccess(response.data));\n    console.log(\"Data in Redux State:\");\n  } catch (error) {\n    dispatch(fetchTicketFail(error.message));\n  }\n});","map":{"version":3,"names":["createAsyncThunk","getAllTickets","fetchTicketFail","fetchTicketLoading","fetchTicketSuccess","fetchAlltickets","_","dispatch","response","data","console","log","error","message"],"sources":["C:/ticket/ticketproject/client/src/page/dashboard/TicketsAction.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getAllTickets } from '../../api/ticketApi';\r\nimport { fetchTicketFail, fetchTicketLoading, fetchTicketSuccess } from './ticketSlice';\r\n\r\nexport const fetchAlltickets = createAsyncThunk(\r\n  'tickets/fetchAlltickets',\r\n  async (_, { dispatch }) => {\r\n    dispatch(fetchTicketLoading());\r\n\r\n    try {\r\n      const response = await getAllTickets();\r\n      dispatch(fetchTicketSuccess(response.data));\r\n      console.log(\"Data in Redux State:\", );\r\n\r\n    } catch (error) {\r\n      dispatch(fetchTicketFail(error.message));\r\n    }\r\n  }\r\n);\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,eAAe,EAAEC,kBAAkB,EAAEC,kBAAkB,QAAQ,eAAe;AAEvF,OAAO,MAAMC,eAAe,GAAGL,gBAAgB,CAC7C,yBAAyB,EACzB,OAAOM,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACzBA,QAAQ,CAACJ,kBAAkB,CAAC,CAAC,CAAC;EAE9B,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMP,aAAa,CAAC,CAAC;IACtCM,QAAQ,CAACH,kBAAkB,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC3CC,OAAO,CAACC,GAAG,CAAC,sBAAwB,CAAC;EAEvC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,QAAQ,CAACL,eAAe,CAACU,KAAK,CAACC,OAAO,CAAC,CAAC;EAC1C;AACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}