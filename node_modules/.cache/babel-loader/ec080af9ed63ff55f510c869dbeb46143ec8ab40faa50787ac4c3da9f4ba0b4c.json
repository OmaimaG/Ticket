{"ast":null,"code":"import { fetchTicketLoading, fetchTicketSuccess, fetchTicketFail, searchTickets, fetchSingleTicketLoading, fetchSingleTicketSuccess, fetchSingleTicketFail, replyTicketLoading, replyTicketSuccess, replyTicketFail, closeTicketLoading, closeTicketSuccess, closeTicketFail } from \"./ticketsSlice\";\nimport { getAllTickets, getSingleTicket, updateReplyTicket, updateTicketStatusClosed } from \"../../api/ticketApi\";\nexport const fetchAllTickets = () => async dispatch => {\n  dispatch(fetchTicketLoading());\n  try {\n    const result = await getAllTickets();\n    result.data.result.length && dispatch(fetchTicketSuccess(result.data.result));\n  } catch (error) {\n    dispatch(fetchTicketFail(error.message));\n  }\n};\nexport const filterSerachTicket = str => dispatch => {\n  dispatch(searchTickets(str));\n};\n\n//Actions for single ticket only\nexport const fetchSingleTicket = _id => async dispatch => {\n  dispatch(fetchSingleTicketLoading());\n  try {\n    const result = await getSingleTicket(_id);\n    dispatch(fetchSingleTicketSuccess(result.data.result.length && result.data.result[0]));\n  } catch (error) {\n    dispatch(fetchSingleTicketFail(error.message));\n  }\n};\n\n//Actions for replying on single ticket\nexport const replyOnTicket = (_id, msgObj) => async dispatch => {\n  dispatch(replyTicketLoading());\n  try {\n    const result = await updateReplyTicket(_id, msgObj);\n    console.log(result);\n    if (result.status === \"error\") {\n      return dispatch(replyTicketFail(result.message));\n    }\n    dispatch(fetchSingleTicket(_id));\n    dispatch(replyTicketSuccess(result.message));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(replyTicketFail(error.message));\n  }\n};\n//Actions for closing ticket\nexport const closeTicket = _id => async dispatch => {\n  dispatch(closeTicketLoading());\n  try {\n    const result = await updateTicketStatusClosed(_id);\n    if (result.status === \"error\") {\n      return dispatch(closeTicketFail(result.message));\n    }\n    dispatch(fetchSingleTicket(_id));\n    dispatch(closeTicketSuccess(\"Status Updated successfully\"));\n  } catch (error) {\n    console.log(error.message);\n    dispatch(closeTicketFail(error.message));\n  }\n};","map":{"version":3,"names":["fetchTicketLoading","fetchTicketSuccess","fetchTicketFail","searchTickets","fetchSingleTicketLoading","fetchSingleTicketSuccess","fetchSingleTicketFail","replyTicketLoading","replyTicketSuccess","replyTicketFail","closeTicketLoading","closeTicketSuccess","closeTicketFail","getAllTickets","getSingleTicket","updateReplyTicket","updateTicketStatusClosed","fetchAllTickets","dispatch","result","data","length","error","message","filterSerachTicket","str","fetchSingleTicket","_id","replyOnTicket","msgObj","console","log","status","closeTicket"],"sources":["C:/ticket/ticketproject/client/src/page/dashboard/TicketsAction.js"],"sourcesContent":["import {\r\n  fetchTicketLoading,\r\n  fetchTicketSuccess,\r\n  fetchTicketFail,\r\n  searchTickets,\r\n  fetchSingleTicketLoading,\r\n  fetchSingleTicketSuccess,\r\n  fetchSingleTicketFail,\r\n  replyTicketLoading,\r\n  replyTicketSuccess,\r\n  replyTicketFail,\r\n  closeTicketLoading,\r\n  closeTicketSuccess,\r\n  closeTicketFail,\r\n} from \"./ticketsSlice\";\r\n\r\nimport {\r\n  getAllTickets,\r\n  getSingleTicket,\r\n  updateReplyTicket,\r\n  updateTicketStatusClosed,\r\n} from \"../../api/ticketApi\";\r\n\r\nexport const fetchAllTickets = () => async (dispatch) => {\r\n  dispatch(fetchTicketLoading());\r\n  try {\r\n    const result = await getAllTickets();\r\n    result.data.result.length &&\r\n      dispatch(fetchTicketSuccess(result.data.result));\r\n  } catch (error) {\r\n    dispatch(fetchTicketFail(error.message));\r\n  }\r\n};\r\n\r\nexport const filterSerachTicket = (str) => (dispatch) => {\r\n  dispatch(searchTickets(str));\r\n};\r\n\r\n//Actions for single ticket only\r\nexport const fetchSingleTicket = (_id) => async (dispatch) => {\r\n  dispatch(fetchSingleTicketLoading());\r\n  try {\r\n    const result = await getSingleTicket(_id);\r\n    dispatch(\r\n      fetchSingleTicketSuccess(\r\n        result.data.result.length && result.data.result[0]\r\n      )\r\n    );\r\n  } catch (error) {\r\n    dispatch(fetchSingleTicketFail(error.message));\r\n  }\r\n};\r\n\r\n//Actions for replying on single ticket\r\nexport const replyOnTicket = (_id, msgObj) => async (dispatch) => {\r\n  dispatch(replyTicketLoading());\r\n  try {\r\n    const result = await updateReplyTicket(_id, msgObj);\r\n    console.log(result);\r\n    if (result.status === \"error\") {\r\n      return dispatch(replyTicketFail(result.message));\r\n    }\r\n\r\n    dispatch(fetchSingleTicket(_id));\r\n\r\n    dispatch(replyTicketSuccess(result.message));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    dispatch(replyTicketFail(error.message));\r\n  }\r\n};\r\n//Actions for closing ticket\r\nexport const closeTicket = (_id) => async (dispatch) => {\r\n  dispatch(closeTicketLoading());\r\n  try {\r\n    const result = await updateTicketStatusClosed(_id);\r\n    if (result.status === \"error\") {\r\n      return dispatch(closeTicketFail(result.message));\r\n    }\r\n\r\n    dispatch(fetchSingleTicket(_id));\r\n\r\n    dispatch(closeTicketSuccess(\"Status Updated successfully\"));\r\n  } catch (error) {\r\n    console.log(error.message);\r\n    dispatch(closeTicketFail(error.message));\r\n  }\r\n};"],"mappings":"AAAA,SACEA,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,EACfC,aAAa,EACbC,wBAAwB,EACxBC,wBAAwB,EACxBC,qBAAqB,EACrBC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,QACV,gBAAgB;AAEvB,SACEC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,wBAAwB,QACnB,qBAAqB;AAE5B,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACvDA,QAAQ,CAAClB,kBAAkB,CAAC,CAAC,CAAC;EAC9B,IAAI;IACF,MAAMmB,MAAM,GAAG,MAAMN,aAAa,CAAC,CAAC;IACpCM,MAAM,CAACC,IAAI,CAACD,MAAM,CAACE,MAAM,IACvBH,QAAQ,CAACjB,kBAAkB,CAACkB,MAAM,CAACC,IAAI,CAACD,MAAM,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdJ,QAAQ,CAAChB,eAAe,CAACoB,KAAK,CAACC,OAAO,CAAC,CAAC;EAC1C;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,GAAG,IAAMP,QAAQ,IAAK;EACvDA,QAAQ,CAACf,aAAa,CAACsB,GAAG,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAIC,GAAG,IAAK,MAAOT,QAAQ,IAAK;EAC5DA,QAAQ,CAACd,wBAAwB,CAAC,CAAC,CAAC;EACpC,IAAI;IACF,MAAMe,MAAM,GAAG,MAAML,eAAe,CAACa,GAAG,CAAC;IACzCT,QAAQ,CACNb,wBAAwB,CACtBc,MAAM,CAACC,IAAI,CAACD,MAAM,CAACE,MAAM,IAAIF,MAAM,CAACC,IAAI,CAACD,MAAM,CAAC,CAAC,CACnD,CACF,CAAC;EACH,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdJ,QAAQ,CAACZ,qBAAqB,CAACgB,KAAK,CAACC,OAAO,CAAC,CAAC;EAChD;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,aAAa,GAAGA,CAACD,GAAG,EAAEE,MAAM,KAAK,MAAOX,QAAQ,IAAK;EAChEA,QAAQ,CAACX,kBAAkB,CAAC,CAAC,CAAC;EAC9B,IAAI;IACF,MAAMY,MAAM,GAAG,MAAMJ,iBAAiB,CAACY,GAAG,EAAEE,MAAM,CAAC;IACnDC,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;IACnB,IAAIA,MAAM,CAACa,MAAM,KAAK,OAAO,EAAE;MAC7B,OAAOd,QAAQ,CAACT,eAAe,CAACU,MAAM,CAACI,OAAO,CAAC,CAAC;IAClD;IAEAL,QAAQ,CAACQ,iBAAiB,CAACC,GAAG,CAAC,CAAC;IAEhCT,QAAQ,CAACV,kBAAkB,CAACW,MAAM,CAACI,OAAO,CAAC,CAAC;EAC9C,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAACC,OAAO,CAAC;IAC1BL,QAAQ,CAACT,eAAe,CAACa,KAAK,CAACC,OAAO,CAAC,CAAC;EAC1C;AACF,CAAC;AACD;AACA,OAAO,MAAMU,WAAW,GAAIN,GAAG,IAAK,MAAOT,QAAQ,IAAK;EACtDA,QAAQ,CAACR,kBAAkB,CAAC,CAAC,CAAC;EAC9B,IAAI;IACF,MAAMS,MAAM,GAAG,MAAMH,wBAAwB,CAACW,GAAG,CAAC;IAClD,IAAIR,MAAM,CAACa,MAAM,KAAK,OAAO,EAAE;MAC7B,OAAOd,QAAQ,CAACN,eAAe,CAACO,MAAM,CAACI,OAAO,CAAC,CAAC;IAClD;IAEAL,QAAQ,CAACQ,iBAAiB,CAACC,GAAG,CAAC,CAAC;IAEhCT,QAAQ,CAACP,kBAAkB,CAAC,6BAA6B,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdQ,OAAO,CAACC,GAAG,CAACT,KAAK,CAACC,OAAO,CAAC;IAC1BL,QAAQ,CAACN,eAAe,CAACU,KAAK,CAACC,OAAO,CAAC,CAAC;EAC1C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}